name: Create HCP Terraform Workspace on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'terraform/**'  # Only trigger when changes are made in the terraform directory

jobs:
  detect-new-modules:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to detect new directories
      
      - name: Fetch base branch for comparison
        run: |
          git fetch origin ${{ github.base_ref }}
      
      - name: Detect new directories
        id: detect_dirs
        run: |
          # Get the list of changed files in the PR
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep '^terraform/')
          
          # Extract unique new directories under terraform/
          NEW_DIRS=$(echo "$CHANGED_FILES" | grep -o "terraform/[^/]*" | sort | uniq)
          
          # Check if these directories are actually new (not in the base branch)
          ACTUAL_NEW_DIRS=""
          for dir in $NEW_DIRS; do
            if [ ! -d "$dir" ]; then
              continue
            fi
            
            # Check if directory existed in base branch
            if ! git ls-tree -d origin/${{ github.base_ref }} "$dir" &> /dev/null; then
              ACTUAL_NEW_DIRS="$ACTUAL_NEW_DIRS $dir"
              echo "Found new directory: $dir"
            fi
          done
          
          # Format as JSON array for output
          DIRS_JSON=$(echo "$ACTUAL_NEW_DIRS" | tr ' ' '\n' | sed '/^$/d' | jq -R . | jq -s .)
          echo "new_dirs=$DIRS_JSON" >> $GITHUB_OUTPUT
          echo "Found new directories: $DIRS_JSON"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Create HCP Terraform Workspaces
        if: ${{ steps.detect_dirs.outputs.new_dirs != '[]' && steps.detect_dirs.outputs.new_dirs != '' }}
        env:
          TFE_TOKEN: ${{ secrets.TF_API_TOKEN }}
          TFE_ORG: ${{ secrets.TF_ORGANIZATION }}
          TFE_ADDR: "https://app.terraform.io"  # Change to your HCP TFE address if different
        run: |
          # Parse the JSON array of new directories
          NEW_DIRS=$(echo '${{ steps.detect_dirs.outputs.new_dirs }}' | jq -r '.[]')
          
          for dir in $NEW_DIRS; do
            # Extract module name from path
            MODULE_NAME=$(basename "$dir")
            echo "Creating workspace for module: $MODULE_NAME"
            
            # Create workspace using TFE API
            curl \
              --header "Authorization: Bearer $TFE_TOKEN" \
              --header "Content-Type: application/vnd.api+json" \
              --request POST \
              --data @- \
              "${TFE_ADDR}/api/v2/organizations/${TFE_ORG}/workspaces" << EOF
            {
              "data": {
                "type": "workspaces",
                "attributes": {
                  "name": "${MODULE_NAME}",
                  "auto-apply": false,
                  "terraform-version": "1.5.5",
                  "working-directory": "terraform/${MODULE_NAME}"
                }
              }
            }
            EOF
            
            echo "Workspace '${MODULE_NAME}' created successfully"
          done
      
      - name: Comment on PR
        if: ${{ steps.detect_dirs.outputs.new_dirs != '[]' && steps.detect_dirs.outputs.new_dirs != '' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newDirs = JSON.parse('${{ steps.detect_dirs.outputs.new_dirs }}');
            
            let comment = '## Terraform Workspaces Created\n\n';
            comment += 'The following new modules were detected and workspaces were created:\n\n';
            
            newDirs.forEach(dir => {
              const moduleName = dir.split('/').pop();
              comment += `- \`${moduleName}\`\n`;
            });
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
